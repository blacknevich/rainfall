#include <cstring>

class N {
public:
    N(int x) {
        some_value = 42; // set some default value
        setAnnotation("Default annotation"); // set some default annotation
    }

    void setAnnotation(char* annotation) {
        std::memcpy(some_annotation, annotation, std::strlen(annotation) + 1);
    }

    N operator+(N& other) {
        N result(0);
        result.some_value = some_value + other.some_value;
        return result;
    }

    N operator-(N& other) {
        N result(0);
        result.some_value = some_value - other.some_value;
        return result;
    }

private:
    int some_value;
    char some_annotation[100];
};

#include <iostream>
#include <cstring>

void main(int param_1,int param_2)
{
  N *this;
  undefined4 *this_00;
  
  if (param_1 < 2) {
                    /* WARNING: Subroutine does not return */
    _exit(1);
  }
  this = (N *)operator.new(0x6c); //first object new
  N::N(this,5);
  this_00 = (undefined4 *)operator.new(0x6c); second object new
  N::N((N *)this_00,6);
  N::setAnnotation(this,*(char **)(param_2 + 4)); //av[1] with 1st object
  (**(code **)*this_00)(this_00,this); function is called from the second object
  return;
}





/*ghidra class enerpreteur
/* __static_initialization_and_destruction_0(int, int) */

void __static_initialization_and_destruction_0(int param_1,int param_2)

{
  if ((param_1 == 1) && (param_2 == 0xffff)) {
    std::ios_base::Init::Init((Init *)&std::__ioinit);
    __cxa_atexit(std::ios_base::Init::~Init,&std::__ioinit,&__dso_handle);
  }
  return;
}

/* N::N(int) */

void __thiscall N::N(N *this,int param_1)

{
  *(undefined ***)this = &PTR_operator+_08048848;
  *(int *)(this + 0x68) = param_1;
  return;
}

/* N::TEMPNAMEPLACEHOLDERVALUE(N&) */

int __thiscall N::operator+(N *this,N *param_1)

{
  return *(int *)(param_1 + 0x68) + *(int *)(this + 0x68);
}

/* N::TEMPNAMEPLACEHOLDERVALUE(N&) */

int __thiscall N::operator-(N *this,N *param_1)

{
  return *(int *)(this + 0x68) - *(int *)(param_1 + 0x68);
}

/* N::setAnnotation(char*) */

void __thiscall N::setAnnotation(N *this,char *param_1)

{
  size_t __n;

  __n = strlen(param_1);
  memcpy(this + 4,param_1,__n);
  return;
}
*/
